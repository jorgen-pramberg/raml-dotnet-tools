<#@ template language="C#" hostspecific="True" #>
<#@include file="CommonHeader.ttinclude"#>

<#
var hasXmlSchemas = false;
foreach (var apiObject in model.Objects.Where(o => !string.IsNullOrWhiteSpace(o.GeneratedCode)))
{
    hasXmlSchemas = true;
#>

<#= apiObject.GeneratedCode #>

<#
}
#>


<#
		manager.StartNewFile(String.Format(fileName, classObject.Name));
#>

<#
	manager.EndBlock();
	manager.Process(true);
#>



namespace <#= model.Namespace #>.Models
{
<#
foreach (var apiObject in model.Objects.Where(o => string.IsNullOrWhiteSpace(o.GeneratedCode)))
{
    if(hasXmlSchemas && !apiObject.Properties.Any())
        continue;

	if (!string.IsNullOrWhiteSpace(apiObject.Description))
	{
#>
    /// <summary>
    /// <#= XmlCommentHelper.Escape(apiObject.Description) #>
    /// </summary>
<#
	}	
	
	if(!apiObject.IsMultiple && !string.IsNullOrWhiteSpace(apiObject.BaseClass)) 
	{
#>
    public partial class <#= apiObject.Name #> <#= " : " +  apiObject.BaseClass #>
    {
<#
	} 
	else 
	{
#>
    public <#= (apiObject.Properties.Any()) ? "partial class " : "abstract class " #> <#= apiObject.Name #> <#= apiObject.IsMultiple ? ": ApiMultipleResponse" : string.Empty #>
    {
<#
	} 

	if (apiObject.IsMultiple)
	{
#>
        static readonly Dictionary<HttpStatusCode, string> schemas = new Dictionary<HttpStatusCode, string>
        {
<#
		foreach (var property in apiObject.Properties.Where(p => p.Type != null && p.Name != null && p.JSONSchema != null).ToArray())
		{
#>
			{ (HttpStatusCode)<#= (int)property.StatusCode #>, "<#= property.JSONSchema #>"},
<#
        }
#>
		};
        
		public static string GetSchema(HttpStatusCode statusCode)
        {
            return schemas.ContainsKey(statusCode) ? schemas[statusCode] : string.Empty;
        }
        
        public <#= apiObject.Name #>()
        {
<#
		foreach (var property in apiObject.Properties.Where(p => p != null && p.Type != null && p.Name != null).ToArray())
		{
#>
            names.Add((HttpStatusCode)<#= (int)property.StatusCode #>, "<#= property.Name #>");
            types.Add((HttpStatusCode)<#= (int)property.StatusCode #>, typeof(<#= property.Type #>));
<#
		}
#>
        }
<#
	}

	foreach (var property in apiObject.Properties.Where(p => p != null && p.Type != null && p.Name != null).ToArray())
	{
	    if (!string.IsNullOrWhiteSpace(property.Description))
	    {
#>
        /// <summary>
        /// <#= XmlCommentHelper.Escape(property.Description) #>
        /// </summary>
<#
    	}
		if(!string.IsNullOrWhiteSpace(property.OriginalName) && property.OriginalName != property.Name)
		{
#>
		[JsonProperty("<#= property.OriginalName #>")]
<#		} 

		if(property.IsEnum)
		{
#>
		[JsonConverter(typeof(StringEnumConverter))]
<#		} #>
        public <#= property.Type #> <#= property.Name #> { get; set; }

<#
	}

#>

    } // end class

<#
}
