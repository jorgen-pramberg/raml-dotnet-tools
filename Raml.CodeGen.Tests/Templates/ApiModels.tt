<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="$(SolutionDir)RAML.CodeGen.Tests\bin\Debug\RAML.Parser.dll" #>
<#@ assembly name="$(SolutionDir)RAML.CodeGen.Tests\bin\Debug\EdgeJs.dll" #>
<#@ assembly name="$(SolutionDir)Raml.Tools\bin\Debug\Raml.Tools.dll" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="Raml.Parser" #>
<#@ import namespace="Raml.Tools" #>
<#@ import namespace="Raml.Tools.WebApiGenerator" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
<#

	var parser = new RamlParser();
	var ramlFile = Host.ResolvePath("fstab.raml");
	var raml = parser.Load(ramlFile);
	var service = new WebApiGeneratorService(raml);
	var model = service.BuildModel();

#>

using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace <#= model.Namespace #>.Models
{
<#
foreach (var apiObject in model.Objects.Values)
{

	if (!string.IsNullOrWhiteSpace(apiObject.Description))
	{
#>
    /// <summary>
    /// <#= XmlCommentHelper.Escape(apiObject.Description) #>
    /// </summary>
<#
	}

	if(!apiObject.IsMultiple && !string.IsNullOrWhiteSpace(apiObject.BaseClass)) 
	{
#>
    public partial class <#= apiObject.Name #> <#= " : " +  apiObject.BaseClass #>
<#
	} else {
#>
    public partial class <#= apiObject.Name #>
<#
	}
#>
    {
        
<#
	foreach (var property in apiObject.Properties.Where(p => p != null && p.Type != null && p.Name != null).ToArray())
	{
	    if (!string.IsNullOrWhiteSpace(property.Description))
	    {
#>
        /// <summary>
        /// <#= property.Description #>
        /// </summary>
<#
	    }
		
		if(!string.IsNullOrWhiteSpace(property.OriginalName) && property.OriginalName != property.Name)
		{
#>
		[JsonProperty("<#= property.OriginalName #>")]
<#		} 

		if(property.IsEnum)
		{
#>
		[JsonConverter(typeof(StringEnumConverter))]
<#		} #>
        public <#= property.Type #> <#= property.Name #> { get; set; }
<#
	}
#>
    } // end class

<#
}
	if (model.Warnings != null && model.Warnings.Any()){
#>
    // Unable to parse the following Schemas. Please note that JSON Schema version 4 is not supported
<#
		foreach (var warning in model.Warnings)
		{
#>
    // <#= warning.Key #> - <#= warning.Value #>
<#
		}
    }

foreach (var apiEnum in model.Enums)
{
	if (!string.IsNullOrWhiteSpace(apiEnum.Description))
	{
#>
    /// <summary>
    /// <#= apiEnum.Description #>
    /// </summary>
<#
	}	
#>
	
	public enum <#= apiEnum.Name #>
	{
		<#= string.Join(", ", apiEnum.Values) #>
    }

<#
}
#>
} // end Objects namespace